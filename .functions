#!/usr/bin/env bash

source ~/.secrets


arm() {
  arch -arm64e $@
}

x86() {
  arch -x86_64 $@
}


encode() {
	echo -n "$1" | openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -a -salt -pass pass:"${MY_STRONG_PASS}"
}

decode() {
	echo "$1" | openssl aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -a -d -salt -pass pass:"${MY_STRONG_PASS}" && echo ""
}

# Create a data URL from a file
dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

emojihex() {
	echo -n "$1"| hexdump
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

genstr() {
	echo "Random string (25 symbols):";
	pwgen -Bcns 25 1
}

genpwd() {
	echo "5 strong passwords:";
	echo ""
	pwgen -Bcnsy -r '?!li1I0OB8|`.,:;^"[]{}\/<>()-_+~' 25 5 -1
}

genpwd1() {
	pwgen -Bcnsy -r '?!li1I0OB8|`.,:;^"[]{}\/<>()-_+~' 25 1 | pbcopy;
	echo "üîê Strong password has been created!"
}


# Start a PHP server from a directory, optionally specifying the port
phpserver() {
	local port="${1:-4000}";
	sleep 1 && open "http://localhost:${port}/" &
	php -S "localhost:${port}";
}


# crypto market top percentage
cmtp() {
  v=$(curl -s 'https://api.cryptorian.ru/v1/cmtp' | jq -r '.data.row.value')
  echo "${v:0:5}%" # ${parameter:offset:length}
}

# my crypto balance
mcb() {
  curl -s "https://api.cryptorian.ru/v1/portfolio?token=${CRYPTORIAN_TOKEN}" | jq -r '.data.total.balance'
}

# BTC fast fees
btcff() {
	curl -s "https://mempool.space/api/v1/fees/recommended" | jq -r '.fastestFee'
}

# ETH fast fee
ethff() {
	curl -s "https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=${ETHERSCAN_API_KEY}" | jq -r '.result.FastGasPrice'
}
