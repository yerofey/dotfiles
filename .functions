#!/usr/bin/env bash

source ~/.secrets


encode() {
	echo -n "$1" | openssl enc -aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -a -salt -pass pass:"${MY_STRONG_PASS}" -A && echo ""
}

decode() {
	echo "$1" | openssl aes-256-cbc -md sha512 -pbkdf2 -iter 100000 -a -d -salt -pass pass:"${MY_STRONG_PASS}" && echo ""
}

encrypt() {
	node ~/code/github/encryption/cli.js -a encrypt -s "${1}" -d 4
}

decrypt() {
	node ~/code/github/encryption/cli.js -a decrypt -s "${1}"
}

# Create a data URL from a file
dataurl() {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

emojihex() {
	echo -n "$1"| hexdump
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

curltime() {
	curl -o /dev/null -s -w '* Est. connection: %{time_connect}s\n* First Byte: %{time_starttransfer}s\n* Total: %{time_total}s\n' ${1}
}

genstr() {
	local len=${1:-20}
	echo "Random string generated [${len}]:";
	pwgen -Bcns ${len} 1
}

genpwd() {
	local len=${1:-20}
	pwgen -Bcnsy -r '?!li1I0OB8|`.,:;^"[]{}\/<>()-_+~'\' ${len} 1 | pbcopy;
	echo "üîê Strong password has been created and saved to clipboard! [${len}]"
}

genkey() {
	local len=${1:-32}
	openssl rand -base64 ${len} | tr -d '\n' | pbcopy
	echo "üîë Secret key has been created and saved to clipboard! [${len}]"
}

uuid() {
	# @link https://serverfault.com/questions/103359/how-to-create-a-uuid-in-bash#comment1210345_799198
    od -x /dev/urandom | head -1 | awk '{OFS="-"; srand($6); sub(/./,"4",$5); sub(/./,substr("89ab",rand()*4,1),$6); print $2$3,$4,$5,$6,$7$8$9}'
}

# Start a PHP server from a directory, optionally specifying the port
phpserver() {
	local port="${1:-4000}";
	# sleep 1 && open "http://localhost:${port}/" &
	php -S "localhost:${port}";
}


# crypto market top percentage
cmtp() {
  local v=$(curl -s 'https://api.cryptorian.ru/v1/cmtp' | jq -r '.data.row.value')
  echo "${v:0:5}%" # ${parameter:offset:length}
}

# my crypto balance
mcb() {
  curl -s "https://api.cryptorian.ru/v1/portfolio?uuid=${CRYPTORIAN_TOKEN}" | jq -r '.data.balance.real'
}

# BTC fast fees
btcff() {
	curl -s "https://mempool.space/api/v1/fees/recommended" | jq -r '.fastestFee'
}

# ETH fast fee
ethff() {
	curl -s "https://api.etherscan.io/api?module=gastracker&action=gasoracle&apikey=${ETHERSCAN_API_KEY}" | jq -r '.result.ProposeGasPrice'
}

# BSC fast fee
bscff() {
	curl -s "https://api.bscscan.com/api?module=gastracker&action=gasoracle&apikey=${BSCSCAN_API_KEY}" | jq -r '.result.ProposeGasPrice'
}

# POLYGON fast fee
plgff() {
	curl -s "https://api.polygonscan.com/api?module=gastracker&action=gasoracle&apikey=${POLYGONSCAN_API_KEY}" | jq -r '.result.ProposeGasPrice'
}

# additional
localip() {
	ifconfig | grep "inet " | grep -Fv 127.0.0.1 | awk '{print $2}'
}

scannetwork() {
	nmap -sP 172.16.0.2/24
}
